<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="icon" type="image/png" href="/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="<%=post.title%>">
    <meta property="og:description" content="<%=post.description%>">
    <meta property="og:image" content="<%=cloudname%>/q_auto,ar_1.91:1,q_auto,g_auto,w_1200,c_lfill/<%=post.featuredImg%>">
    <meta property="og:url" content="<%=domain+path%>">
    <meta property="og:type" content="<%=post.postType || 'course'%>">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="<%=post.title%>">
    <meta name="twitter:description" content="<%=post.description%>">
    <meta name="twitter:image" content="<%=cloudname%>/q_auto,ar_2:1,q_auto,g_auto,w_1200,c_lfill/<%=post.featuredImg%>">
    <meta name="twitter:url" content="<%=domain+path%>">
    
    <!-- General Meta Tags -->
    <meta name="description" content="<%=post.description%>">
    <link rel="canonical" href="https://fnmiloveacademy.com">

    <title><%=post.title%></title>
    <link rel="stylesheet" href="/app.min.css">
</head>
<body>
    <%- include("./partials/header") %>
    <%- include("./partials/editNav.ejs") %>
    <%- body %>
    <%- include("./partials/contactDialog") %>
    <%- include("./partials/footer") %>
    <%- include("./partials/notification") %>
    <%- include("./partials/deleteDialog") %>
    <%- include("./partials/loadingDialog") %>
    <script src="/bootstrap.min.js"></script>
    <script>
        // toast function
        const fadingToast = document.getElementById('fadingToast')
        const toastFadeBootstrap = bootstrap.Toast.getOrCreateInstance(fadingToast)
        const fadeMessage = document.getElementById("fade-toast-msg")
        const fadeTime = document.getElementById("fade-toast-time")
        // toastFadeBootstrap.show();
        const staticToast = document.getElementById('staticToast');
        const toastStaticBootstrap = bootstrap.Toast.getOrCreateInstance(staticToast)
        const staticMessage = document.getElementById("static-toast-msg")
        const staticTime = document.getElementById("static-toast-time")
        // toastStaticBootstrap.show();

        // Contact Form logic
        let contactForm = document.getElementById("contact-form")
        let contactFormSubmitButton = document.getElementById("contact-form-submit-button");
        let disableFormInputs = (form, toggle)=>{   //this function is also utilized somewhere else on this file so be careful when editing it.
            for (const element of form.elements) {
                element.disabled = toggle;
            }
        }
        let formSubmitLogic = async()=>{
            try {
                let contactModal = bootstrap.Modal.getOrCreateInstance('#contactModal')
                contactFormSubmitButton.disabled = true;
                contactFormSubmitButton.innerHTML = `
                    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                    <span role="status">Sending...</span>
                `
                let formData = new URLSearchParams(new FormData(contactForm));

                for (const element of contactForm.elements) {
                    if (element.value === "") {
                        element.classList.add("is-invalid")
                        contactFormSubmitButton.innerHTML = "Send"
                        return
                    }
                }
                disableFormInputs(contactForm, true)

                let formRequest = await fetch("/api/contact", {
                    method: "POST",
                    body: formData,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                })
                if (!formRequest.ok) {
                    throw new Error(await formRequest.text())
                }

                contactFormSubmitButton.innerHTML = "Send"
                contactFormSubmitButton.disabled = false;
                contactForm.reset();
                fadeMessage.textContent = "Message sent"
                toastFadeBootstrap.show()
                contactModal.hide()
                disableFormInputs(contactForm, false)
            } catch (error) {
                disableFormInputs(contactForm, false)
                contactFormSubmitButton.innerHTML = "Send"
                contactFormSubmitButton.disabled = false;
                staticMessage.textContent = error.message
                toastStaticBootstrap.show()
            }
        }
        contactForm.addEventListener("submit", (e)=>{
            e.preventDefault()
            formSubmitLogic()
        })
        contactFormSubmitButton.addEventListener("click", formSubmitLogic)


        <%if(post.postType === "job"){%>
            let jobForm = document.getElementById("job-form");
            let jobFormSubmitButton = document.querySelector(".job-form-submit-btn")
            jobForm.addEventListener("submit", async(e)=>{
                try {
                    e.preventDefault();
                    let resumeInput = jobForm.elements['resume']
                    if (resumeInput.files[0].size > 4 * 1024 * 1024) {
                        resumeInput.classList.add("is-invalid")
                        resumeInput.value = "";
                        return;
                    }
                    let formData = new FormData(jobForm);
                    formData.append("title", "<%=post.title%>")
                    formData.append("companyName", "<%=post.companyName%>")
                    disableFormInputs(jobForm, true)

                    jobFormSubmitButton.innerHTML = `
                        <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                        <span role="status">Sending...</span>
                    `
                    
                    let formRequest = await fetch("/api/contact/job", {
                        method: "POST",
                        body: formData,
                    })
                    if (!formRequest.ok) {
                        throw new Error(await formRequest.text())
                    }

                    jobFormSubmitButton.innerHTML = "Submit Application"
                    disableFormInputs(jobForm, false)
                    jobForm.reset()
                    contactForm.reset();
                    fadeMessage.textContent = "Message sent"
                    toastFadeBootstrap.show()
                } catch (error) {
                    jobFormSubmitButton.innerHTML = "Submit Application"
                    disableFormInputs(jobForm, false);
                    staticMessage.textContent = error.message
                    toastStaticBootstrap.show()
                }
            })
        <%}%>

        // delete dialog function ------ User must be signedIn to delete a post
            let deleteModal = new bootstrap.Modal(document.getElementById('deletePostModal'), {
                keyboard: false
            })
            const deleteInput = document.getElementById("delete-input");
            const deleteButton = document.getElementById("delete-dialog-confirmation-button");
            deleteInput.addEventListener("input", (e) => {
                if (deleteInput.validity.patternMismatch || e.target.value.length < 1) {
                    deleteButton.setAttribute("disabled", "true");
                } else {
                    deleteButton.removeAttribute("disabled");
                }
            })
            deleteButton.addEventListener("click", async() => {
                try {
                    const req = await fetch("/api/<%=post.postType || 'course'%>s/<%=post._id%>", {
                        method: "DELETE"
                    })
                    if(!req.ok){
                        throw new Error(await req.text())
                    }
                    fadeMessage.textContent = "<%=post.postType || 'course'%> deleted"
                    toastFadeBootstrap.show()
                    setTimeout(() => {
                        location.href = "/<%=post.postType ? 'blog' : 'courses' %>"
                    }, 1000);
                } catch (error) {
                    staticMessage.textContent = error.message
                    toastStaticBootstrap.show()
                }
            })
    </script>
</body>
</html>